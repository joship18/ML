{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"iris.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas.api.types import is_numeric_dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/peeyush/.local/lib/python3.6/site-packages/ipykernel_launcher.py:4: DeprecationWarning: \n",
      ".ix is deprecated. Please use\n",
      ".loc for label based indexing or\n",
      ".iloc for positional indexing\n",
      "\n",
      "See the documentation here:\n",
      "http://pandas.pydata.org/pandas-docs/stable/indexing.html#ix-indexer-is-deprecated\n",
      "  after removing the cwd from sys.path.\n",
      "/home/peeyush/.local/lib/python3.6/site-packages/ipykernel_launcher.py:5: DeprecationWarning: \n",
      ".ix is deprecated. Please use\n",
      ".loc for label based indexing or\n",
      ".iloc for positional indexing\n",
      "\n",
      "See the documentation here:\n",
      "http://pandas.pydata.org/pandas-docs/stable/indexing.html#ix-indexer-is-deprecated\n",
      "  \"\"\"\n"
     ]
    }
   ],
   "source": [
    "for i in range(df.shape[1]):\n",
    "    if(is_numeric_dtype(df.iloc[:,i])):\n",
    "        mask = df.iloc[:, i] < df.iloc[:, i].median()\n",
    "        df.ix[mask, i] = 0\n",
    "        df.ix[~mask, i] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "mask = np.random.rand(len(df)) < 0.8\n",
    "train = df.loc[mask]\n",
    "test = df.loc[~mask]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def entropy(vec):\n",
    "    m = len(vec)\n",
    "    E = vec.value_counts()\n",
    "    n = len(E)\n",
    "    E = E/m\n",
    "    E = - E*np.log2(E)\n",
    "    return (E.sum() / np.log2(n))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_best_split(df):\n",
    "    best_gain = 0\n",
    "    best_attribute = None\n",
    "    \n",
    "    current_entropy = entropy(df.iloc[:,-1])\n",
    "    \n",
    "    n_features = df.shape[1] - 1\n",
    "    \n",
    "    if(n_features == 0):\n",
    "        return best_gain, best_attribute\n",
    "    \n",
    "    n_rows = df.shape[0]\n",
    "    \n",
    "    for i in range(n_features):\n",
    "        entropy_after_split = 0\n",
    "        attribute_values = df.iloc[:,i].unique()\n",
    "        for j in attribute_values:\n",
    "            mask = (df.iloc[:,i] == j)\n",
    "            entropy_after_split = entropy_after_split + (len(mask[mask == True]) / n_rows )* entropy(df.ix[mask,-1])\n",
    "        gain = current_entropy - entropy_after_split\n",
    "        if(gain > best_gain):\n",
    "            best_gain = gain\n",
    "            best_attribute = i\n",
    "    \n",
    "    return best_gain, best_attribute\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def partition(df, attribute):\n",
    "    \n",
    "    \n",
    "    partitioned_data = {}\n",
    "    \n",
    "    attribute_values = df.iloc[:,attribute].unique()\n",
    "    \n",
    "    for i in attribute_values:\n",
    "        mask = (df.iloc[:,attribute] == i)\n",
    "        partitioned_data[i] = (df.loc[mask, :])\n",
    "    \n",
    "    for i in range(len(partitioned_data)):\n",
    "        partitioned_data[i].drop(list(df)[attribute], axis=1) \n",
    "    \n",
    "    return partitioned_data\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Leaf_node:\n",
    "    def __init__(self, df):\n",
    "        self.prediction = {}\n",
    "        X = df.iloc[:, -1].mode()\n",
    "        n = len(X)\n",
    "        for i in X:\n",
    "            self.prediction[i] = 100/n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Decision_node:\n",
    "    def __init__(self, attribute):\n",
    "        self.attribute = attribute\n",
    "        self.children = {}\n",
    "    def add_child(self, df, value):\n",
    "        self.children[value] = df\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_tree(df):\n",
    "    gain, attribute = find_best_split(df)\n",
    "    \n",
    "    if(gain == 0):\n",
    "        return Leaf_node(df)\n",
    "    \n",
    "    partitioned_data = partition(df, attribute)\n",
    "    \n",
    "    X = Decision_node(list(df)[attribute])\n",
    "    \n",
    "    for i in range(len(partitioned_data)):\n",
    "        X.add_child(build_tree(partitioned_data[i]), i)\n",
    "    \n",
    "    return X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/peeyush/.local/lib/python3.6/site-packages/ipykernel_launcher.py:19: DeprecationWarning: \n",
      ".ix is deprecated. Please use\n",
      ".loc for label based indexing or\n",
      ".iloc for positional indexing\n",
      "\n",
      "See the documentation here:\n",
      "http://pandas.pydata.org/pandas-docs/stable/indexing.html#ix-indexer-is-deprecated\n",
      "/home/peeyush/.local/lib/python3.6/site-packages/ipykernel_launcher.py:7: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  import sys\n"
     ]
    }
   ],
   "source": [
    "head = build_tree(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(test, head):\n",
    "    correct_predictions = 0\n",
    "    for i in test.index:\n",
    "        node = head\n",
    "        while(isinstance(node, Leaf_node) == False):\n",
    "            Z = test.loc[i,node.attribute]\n",
    "            node = node.children[Z]\n",
    "        print(\"actual class: {} \\t predicted class: {}\" .format(test.loc[i, \"species\"], node.prediction))\n",
    "        if(test.loc[i, \"species\"] in  node.prediction):\n",
    "            correct_predictions += 1\n",
    "    print(\"\\naccuracy = {}%\\n\" .format(correct_predictions*100/len(test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "actual class: setosa \t predicted class: {'setosa': 100.0}\n",
      "actual class: setosa \t predicted class: {'setosa': 100.0}\n",
      "actual class: setosa \t predicted class: {'setosa': 100.0}\n",
      "actual class: setosa \t predicted class: {'setosa': 100.0}\n",
      "actual class: setosa \t predicted class: {'setosa': 100.0}\n",
      "actual class: setosa \t predicted class: {'setosa': 100.0}\n",
      "actual class: setosa \t predicted class: {'setosa': 100.0}\n",
      "actual class: setosa \t predicted class: {'setosa': 100.0}\n",
      "actual class: setosa \t predicted class: {'setosa': 100.0}\n",
      "actual class: setosa \t predicted class: {'setosa': 100.0}\n",
      "actual class: setosa \t predicted class: {'setosa': 100.0}\n",
      "actual class: setosa \t predicted class: {'setosa': 100.0}\n",
      "actual class: versicolor \t predicted class: {'virginica': 100.0}\n",
      "actual class: versicolor \t predicted class: {'virginica': 100.0}\n",
      "actual class: versicolor \t predicted class: {'versicolor': 100.0}\n",
      "actual class: versicolor \t predicted class: {'virginica': 100.0}\n",
      "actual class: versicolor \t predicted class: {'virginica': 100.0}\n",
      "actual class: versicolor \t predicted class: {'versicolor': 100.0}\n",
      "actual class: versicolor \t predicted class: {'versicolor': 100.0}\n",
      "actual class: versicolor \t predicted class: {'virginica': 100.0}\n",
      "actual class: versicolor \t predicted class: {'versicolor': 100.0}\n",
      "actual class: virginica \t predicted class: {'virginica': 100.0}\n",
      "actual class: virginica \t predicted class: {'virginica': 100.0}\n",
      "actual class: virginica \t predicted class: {'versicolor': 100.0}\n",
      "actual class: virginica \t predicted class: {'virginica': 100.0}\n",
      "actual class: virginica \t predicted class: {'virginica': 100.0}\n",
      "actual class: virginica \t predicted class: {'versicolor': 100.0}\n",
      "actual class: virginica \t predicted class: {'virginica': 100.0}\n",
      "actual class: virginica \t predicted class: {'virginica': 100.0}\n",
      "actual class: virginica \t predicted class: {'virginica': 100.0}\n",
      "actual class: virginica \t predicted class: {'virginica': 100.0}\n",
      "actual class: virginica \t predicted class: {'virginica': 100.0}\n",
      "actual class: virginica \t predicted class: {'virginica': 100.0}\n",
      "actual class: virginica \t predicted class: {'virginica': 100.0}\n",
      "actual class: virginica \t predicted class: {'virginica': 100.0}\n",
      "actual class: virginica \t predicted class: {'virginica': 100.0}\n",
      "\n",
      "accuracy = 80.55555555555556%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "predict(test, head)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
